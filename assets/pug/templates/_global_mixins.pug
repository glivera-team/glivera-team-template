mixin head(array)
	meta(charset='UTF-8')
	title!=array.title_inner
	meta(name="viewport", content="width=device-width")
	meta(name="SKYPE_TOOLBAR", content="SKYPE_TOOLBAR_PARSER_COMPATIBLE")
	meta(name="apple-mobile-web-app-capable", content="yes")
	meta(name="format-detection", content="telephone=no")

	if production
		link(rel='shortcut icon' href='/favicon.ico')
		link(rel='icon' sizes='16x16 32x32 64x64' href='/favicon.ico')
		link(rel='icon' type='image/png' sizes='196x196' href='/favicon-192.png')
		link(rel='icon' type='image/png' sizes='160x160' href='/favicon-160.png')
		link(rel='icon' type='image/png' sizes='96x96' href='/favicon-96.png')
		link(rel='icon' type='image/png' sizes='64x64' href='/favicon-64.png')
		link(rel='icon' type='image/png' sizes='32x32' href='/favicon-32.png')
		link(rel='icon' type='image/png' sizes='16x16' href='/favicon-16.png')
		link(rel='apple-touch-icon' href='/favicon-57.png')
		link(rel='apple-touch-icon' sizes='114x114' href='/favicon-114.png')
		link(rel='apple-touch-icon' sizes='72x72' href='/favicon-72.png')
		link(rel='apple-touch-icon' sizes='144x144' href='/favicon-144.png')
		link(rel='apple-touch-icon' sizes='60x60' href='/favicon-60.png')
		link(rel='apple-touch-icon' sizes='120x120' href='/favicon-120.png')
		link(rel='apple-touch-icon' sizes='76x76' href='/favicon-76.png')
		link(rel='apple-touch-icon' sizes='152x152' href='/favicon-152.png')
		link(rel='apple-touch-icon' sizes='180x180' href='/favicon-180.png')
		meta(name='msapplication-TileColor' content='#FFFFFF')
		meta(name='msapplication-TileImage' content='/favicon-144.png')
		meta(name='msapplication-config' content='/browserconfig.xml')

	link(rel="stylesheet" media="all" href="styles/main_global.css")

mixin scripts
	if jQuery
		|<script src="//ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
		|<script>window.jQuery || document.write('<script src="js/jquery-2.2.4.min.js"><\/script>')</script>

	if TweenMax
		|<script src="//cdn.glivera-team.com/gsap/gsap.min.js"></script>
		|<script>window.TweenMax || document.write('<script src="js/gsap.min.js"><\/script>')</script>

	+script_cdn([
		{link:'//cdn.glivera-team.com/dev_functions.js'}
	])

	script(src="js/libs.js")
	//- script(src="js/components.js")
	script(src='js/main.js')

//- scripts from cdn
mixin script_cdn(array)
	each item in array
		script(src=item.link)

//- form element
mixin form_element(config)
	if !config.id
		- config.id = config.title.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
	else
		- config.id = config.id.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')

	- label_attributes = {'for': config.id}
	- main_attributes = {'type': config.type, 'id': config.id, 'class': config.add_class, 'placeholder': config.placeholder, 'name': config.name, 'value': config.value}
	- main_v2_attributes = {'id': config.id, 'class': config.add_class, 'placeholder': config.placeholder, 'name': config.name, 'value': config.value}
	- logic_attributes = {'checked': config.checked, 'required': config.required, 'disabled': config.disabled, 'readonly': config.readonly, 'hidden': config.hidden}
	- additional_attributes = config.additional
	- additional_classes = {}

	if config.type === 'text' || config.type === 'password' || config.type === 'email' || config.type === 'tel' || config.type === 'textarea' || config.type === 'select' || config.type === 'file'
		- logic_attributes.checked = false
		- additional_classes = {'class': config.class_array.block_class_mod}
		dl.form_cell&attributes(additional_classes)

			- additional_classes = {'class': config.class_array.class_mod}
			dt.form_cell_title&attributes(additional_classes)
				label&attributes(label_attributes)= config.title

			dd.form_field_wrap&attributes(additional_classes)

				if config.type === 'text' || config.type === 'password' || config.type === 'email' || config.type === 'tel'
					- additional_classes = {'class': config.class_array.elem_class}
					input.form_field&attributes(main_attributes)&attributes(logic_attributes)&attributes(additional_classes)&attributes(additional_attributes)
					block

				if config.type === 'textarea'
					textarea.form_field&attributes(main_v2_attributes)&attributes(logic_attributes)&attributes(additional_attributes)
					block

				if config.type === 'file'
					input.form_field&attributes(main_attributes)&attributes(logic_attributes)&attributes(additional_attributes)
					.form_field_file_field
						span.form_field_file_text= config.title
						span.form_field_file_btn Choose File

				if config.type === 'select'
					- additional_classes = {'class': config.class_array.elem_class}
					select.form_field(data-placeholder= config.placeholder)&attributes(main_v2_attributes)&attributes(additional_attributes)&attributes(additional_classes)
						each option in config.options
							option(value=option)= option
					block

	if config.type === 'checkbox' || config.type === 'radio'
		- additional_classes = {'class': config.class_array.block_class_mod}
		label.radio_check&attributes(additional_classes)
			input.radio_check_input&attributes(main_attributes)&attributes(logic_attributes)&attributes(additional_attributes)
			- additional_classes = {'class': config.class_array.class_mod}
			span.radio_check_text&attributes(additional_classes)= config.title
//- form element###

//- form element v2
mixin mtdInputWrapper(config)
	- mods = config.mods || ''
	- wrapperClass = config.wrapper || mtdFieldsWrapper.default
	- inputClass = config.class || mtdFields.types.default
	div(class= `${wrapperClass} ${mods}`)
		block

mixin mtdInput(config)
	case config.attrs.type
		when 'checkbox'
			input(class= `${inputClass[1]}`)&attributes(config.attrs)
			span(class= `${wrapperClass}__text ${mtdFields.mods.checkboxTextSpan}`)= config.label
		when 'radio'
			input(class= `${inputClass[1]}`)&attributes(config.attrs)
			span(class= `${wrapperClass}__text ${mtdFields.mods.radioTextSpan}`)= config.label
		when 'file'
			input(class= `${inputClass[1]}`)&attributes(config.attrs)
			span(class= `${inputClass[1]}_cta`)= config.label
		default
			input(class= `${inputClass[1]}`)&attributes(config.attrs)

mixin mtdLabel(config, showLabelText)
	case showLabelText
		when false
			label(class= `${inputClass[0]}` for= config.attrs.id)
				block
		default
			label(class= `${inputClass[0]}` for= config.attrs.id)= config.label
				block

mixin mtdTextarea(config)
	textarea(class= `${inputClass[1]}`)&attributes(config.attrs)

mixin select(config)
	+mtdInputWrapper(config)
		+mtdLabel(config)
		select(data-placeholder=config.placeholder class= `${inputClass[1]}`)&attributes(config.attrs)
			each option in config.options
				option(value= option)= option

mixin input(config)
	+mtdInputWrapper(config)
		+mtdLabel(config)
		+mtdInput(config)

mixin textarea(config)
	+mtdInputWrapper(config)
		+mtdLabel(config)
		+mtdTextarea(config)

mixin checkbox(config)
	+mtdInputWrapper(config)
		+mtdLabel(config, false)
			+mtdInput(config)

mixin radiobutton(config)
	+mtdInputWrapper(config)
		+mtdLabel(config, false)
			+mtdInput(config)

mixin file(config)
	+mtdInputWrapper(config)
		+mtdLabel(config, false)
			+mtdInput(config)
//- form element v2###

//- works
mixin loop_while(counter)
	- i=0;
	while i < counter
		-i++;
		block

//- works
mixin loop_while_sub(counter)
	- j = 0;
		while j < counter
			-j++;
			block

//- works
mixin breadcrumbs(array,add_class)
	- add_class = add_class || ''
	ul.breadcrumbs_list(class=add_class)
		each crumb, index in array
			li.breadcrumbs_item
				if (index == array.length - 1)
					a.breadcrumbs_link.current_mod=crumb.text
				else
					a.breadcrumbs_link(href= crumb.url)= crumb.text

//- works
mixin menu(menuArray)
	- gl_mod = menuArray.gl_mod || ''
	ul(class=`${menuArray.gl_class}_list ${gl_mod}`)
		each item in menuArray.items
			- url = item.url || '#'
			if item.active
				li(class= `${menuArray.gl_class}_item active_mod`)
					a(href= url class= `${menuArray.gl_class}_link`)= item.title
			else
				li(class= `${menuArray.gl_class}_item`)
					a(href= url class= `${menuArray.gl_class}_link`)= item.title

//- works
mixin social(socialArray)
	- mod_block = socialArray.mod_block || ''
	ul.social_list(class= `${mod_block}`)
		each item in socialArray.items
			- mod_link = item.mod_link || ''
			li.social_item
				a.social_link(href="#" class= `${mod_link}`)
					+icon(item.name_icon, item.mod_icon)

//- works
mixin icon(name, mod)
	- mod = mod || ''
	svg(class=`icon icon-${name} ${mod}`)
		use(xlink:href=`i/sprite/sprite.svg#${name}`)

mixin pagination(config)
	- config.mod = config.mod || ''
	- config.active = config.active || 1
	.pag_block(class= config.mod)
		ul.pag_list(class= config.mod)
			if config.arrows
				li.pag_item.prev_mod(class= config.mod)
					a.pag_link.prev_mod(href='#' class= config.mod)
			- i = 1;
			while i <= config.pages
				if i == config.pages - 1
					li.pag_item(class= config.mod)
						a.pag_link.dots_mod(class= config.mod) &hellip;
					li.pag_item(class= config.mod)
						a.pag_link(href='#' title= i class= config.mod)= i
				else if i == config.active
					li.pag_item(class= config.mod)
						a.pag_link.active_mod(title= i class= config.mod)= i
				else
					li.pag_item(class= config.mod)
						a.pag_link(href='#' title= i class= config.mod)= i
				-i++
			if config.arrows
				li.pag_item.next_mod
					a.pag_link.next_mod(href='#' class= config.mod)

//- works
//- mixin pagination_2(config)
//- 	- config.mod = config.mod || ''
//- 	- config.active = config.active || 1
//- 	.pag_block(class= config.mod)
//- 		ul.pag_list(class= config.mod)
//- 			if config.arrows
//- 				li.pag_item.prev_mod(class= config.mod)
//- 					a.pag_link.prev_mod(href='#' class= config.mod)
//- 			each page, index in config.pages
//- 				if index == config.pages.length - 1
//- 					li.pag_item(class= config.mod)
//- 						a.pag_link.dots_mod(href='#' class= config.mod) &hellip;
//- 					li.pag_item(class= config.mod)
//- 						a.pag_link(href='#' title= i class= config.mod)= page
//- 				else
//- 					li.pag_item(class= config.mod)
//- 						a.pag_link(href='#' title= i class=config.mod)= page
//- 			if config.arrows
//- 				li.pag_item.next_mod
//- 					a.pag_link.next_mod(href='#' class= config.mod)

//- works
mixin list(array, mod)
	ul(class=`${mod}_list`)
		each item in array
			li(class=`${mod}_item`)= item

//- works
mixin span_list(array, mod)
	ul(class=`${mod}_list`)
		each item in array
			li(class=`${mod}_item`)
				span(class=`${mod}_text`)= item

//- works
mixin link_list(array, mod)
	ul(class=`${mod}_list`)
		each item in array
			li(class=`${mod}_item`)
				a(class=`${mod}_link` href='#')= item
